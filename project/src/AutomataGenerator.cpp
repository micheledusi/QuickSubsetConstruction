/*
 * Michele Dusi, Gianfranco Lamperti
 * Quick Subset Construction
 * 
 * AutomataGenerator.cpp
 *
 * 
 * Implementation of the class AutomataGenerator, which is responsible for generating automata
 * of different types and characteristics, according to the parameters passed to the constructor.
 */

#include "AutomataGenerator.hpp"

#include <string>
#include <cstring>
#include <vector>

#include "Debug.hpp"

namespace quicksc {

	const char* AutomataGenerator::default_name_prefix = "s";

	/**
	 * Constructor.
	 * Since the alphabet is generated by another class, it is better to make this class independent from it.
	 * For this reason, the constructor accepts an already generated alphabet.
	 * The programmer can change the alphabet with the setter methods.
	 */
	AutomataGenerator::AutomataGenerator(Alphabet alphabet, Configurations* configurations) {
		this->m_configurations = configurations;
		this->m_alphabet = alphabet;
		this->m_automaton_structure = (AutomatonType) configurations->valueOf<int>(AutomatonStructure);
		this->m_size = configurations->valueOf<int>(AutomatonSize);
		this->m_name_prefix	= default_name_prefix;
		this->m_transition_percentage = configurations->valueOf<double>(AutomatonTransitionsPercentage);
		this->m_epsilon_probability = configurations->valueOf<double>(EpsilonPercentage);
		this->m_final_probability = configurations->valueOf<double>(AutomatonFinalProbability);
		this->m_max_level = configurations->valueOf<int>(AutomatonMaxLevel);
		this->m_safe_zone_level = configurations->valueOf<int>(AutomatonSafeZoneLevel);
	}

	/**
	 * Destructor.
	 */
	AutomataGenerator::~AutomataGenerator() {
		this->m_alphabet.clear();
	}

	/**
	 * Protected method.
	 * Allows to reset the space of names used for the states of an automaton.
	 * If called at the end of the generation of each automaton, it has the effect of starting the generation process
	 * from zero during the next generation.
	 */
	void AutomataGenerator::resetNames() {
		this->m_namesCounter = 0;
	}

	/**
	 * Protected method.
	 * Builds a unique name from the last reset.
	 * The name is built by concatenating a string with an incremental number, and is used to uniquely identify the states of an automaton.
	 */
	string AutomataGenerator::generateUniqueName() {
		string name = this->m_name_prefix + string(std::to_string(this->m_namesCounter++));
		return name;
	}

	/**
	 * Protected method.
	 * Returns a double-precision floating-point number, between 0 and 1.
	 * It can be used to make choices by comparing it with a predefined probability.
	 */
	double AutomataGenerator::generateNormalizedDouble() {
		return (static_cast <double> (rand()) / static_cast <double> (RAND_MAX));
	}

	/**
	 * Protected method.
	 * Returns a random label chosen from the labels of the alphabet set for the generation of automata.
	 */
	string AutomataGenerator::getRandomLabelFromAlphabet() {
		return (m_alphabet[rand() % m_alphabet.size()]);
	}

	/**
	 * Protected method.
	 * Calculates the number of deterministic transitions to be created inside the automaton.
	 * The number of deterministic transitions is calculated by excluding the possibility that a state has more than one outgoing transition with the same label;
	 * for this reason, we call them "deterministic transitions".
	 * The maximum number of deterministic transitions (on which the percentage is calculated) is given by the number of states multipled by the number of possible labels,
	 * i.e. the cardinality of the alphabet.
	 * 
	 * More specifically, the calculation is performed according to the following algorithm:
	 * - The maximum number of transitions is calculated. This number corresponds to the maximum number of transitions for each state multiplied by the number N of states.
	 *  The maximum number of transitions for a single state is given by the number L of labels available (remember that we are only considering deterministic transitions).
	 * - The requested percentage is calculated on this number, rounded down.
	 * - If the resulting number is lower than the number needed to connect all the states, it is raised up to the number of states - 1.
	 * 
	 * Note: in the case of non-deterministic automata (NFA), it is possible to insert a percentage greater than 1 to generate more than one transition with the same label
	 * (see the documentation of the NFAGenerator class).
	 */
	unsigned long int AutomataGenerator::computeDeterministicTransitionsNumber() {
		unsigned long int max_n_trans = (this->getSize()) * (this->getAlphabet().size());
		unsigned long int n = (unsigned long int) (max_n_trans * this->getTransitionPercentage());
		return (n < this->getSize() - 1) ? (this->getSize() - 1) : (n);
	}

	/**
	 * Getter method.
	 * Returns the alphabet used to generate the automata.
	 */
	Alphabet AutomataGenerator::getAlphabet() {
		return this->m_alphabet;
	};

	/**
	 * Getter method for the automaton structure.
	 */
	AutomatonType AutomataGenerator::getAutomatonStructure() {
		return this->m_automaton_structure;
	};

	/**
	 * Getter method for the size of the automaton.
	 */
	unsigned long int AutomataGenerator::getSize() {
		return this->m_size;
	}

	/**
	 * Getter method for the prefix of the names of the states of the automaton.
	 */
	string AutomataGenerator::getNamePrefix() {
		return this->m_name_prefix;
	}

	/**
	 * Getter method for the percentage of transitions to be generated.
	 */
	double AutomataGenerator::getTransitionPercentage() {
		return this->m_transition_percentage;
	}

	/**
	 * Getter method for the probability of generating an epsilon transition.
	 */
	double AutomataGenerator::getEpsilonProbability() {
		return this->m_epsilon_probability;
	}

	/**
	 * Getter method for the probability of generating a final state, i.e. the probability that a state is final.
	 */
	double AutomataGenerator::getFinalProbability() {
		return this->m_final_probability;
	}

	/**
	 * Getter method for the maximum level of a state inside the automaton.
	 * This parameter is used only for the generation of stratified automata.
	 */
	unsigned int AutomataGenerator::getMaxLevel() {
		return this->m_max_level;
	}

	/**
	 * Getter method for the safe zone level of a state inside the automaton.
	 * This parameter is used only for the generation of stratified automata.
	 */
	void AutomataGenerator::setMaxLevel(unsigned int max_level) {
		this->m_max_level = max_level;
	}

	/**
	 * Getter method for the safe zone level.
	 * This is the level within which it is not possible to find non-deterministic points, in the case of stratified NFA automata that provide for such a possibility.
	 */
	unsigned int AutomataGenerator::getSafeZoneLevel() {
		return this->m_safe_zone_level;
	}

	/**
	 * Returns an automaton of the desired type.
	 * In short, this method is responsible for delegating the creation of the automaton to the other methods of the class, 
	 * depending on the value of the requested parameter. The other methods will then be implemented in the child classes.
	 * 
	 * AutomatonGenerator provides a basic implementation of the methods for building automata of various types,
	 * but they are fake implementations that generate an exception. This allows you to immediately understand if a certain automaton structure is available
	 * for DFA automata or for NFA automata.
	 */
	Automaton* AutomataGenerator::generateAutomaton() {
		switch(this->getAutomatonStructure()) {

		case AUTOMATON_RANDOM :
			return this->generateRandomAutomaton();

		case AUTOMATON_STRATIFIED :
			return this->generateStratifiedAutomaton();

		case AUTOMATON_STRATIFIED_WITH_SAFE_ZONE :
			return this->generateStratifiedWithSafeZoneAutomaton();

		case AUTOMATON_ACYCLIC :
			return this->generateAcyclicAutomaton();

		case AUTOMATON_WEAK :
			return this->generateWeakAutomaton();

		case AUTOMATON_MASLOV :
			return this->generateMaslovAutomaton();

		default :
			DEBUG_LOG_ERROR("Unknown value %d in enumeration <AutomatonType>", this->getAutomatonStructure());
			return NULL;
		}
	}

	#define AUTOMATON_GENERATION_EXCEPTION( automaton_type ) \
		DEBUG_LOG_ERROR("Cannot generate an automaton of type <" #automaton_type "> for the current problem typology"); \
		throw "Cannot generate an automaton of type \"" #automaton_type "\" for the current problem typology";

	Automaton* AutomataGenerator::generateRandomAutomaton() {
		AUTOMATON_GENERATION_EXCEPTION(Random);
	}

	Automaton* AutomataGenerator::generateStratifiedAutomaton() {
		AUTOMATON_GENERATION_EXCEPTION(Stratified);
	}

	Automaton* AutomataGenerator::generateStratifiedWithSafeZoneAutomaton() {
		AUTOMATON_GENERATION_EXCEPTION(StratifiedWithSafeZone);
	}

	Automaton* AutomataGenerator::generateAcyclicAutomaton() {
		AUTOMATON_GENERATION_EXCEPTION(Acyclic);
	}

	Automaton* AutomataGenerator::generateWeakAutomaton() {
		AUTOMATON_GENERATION_EXCEPTION(Weak);
	}

	Automaton* AutomataGenerator::generateMaslovAutomaton() {
		AUTOMATON_GENERATION_EXCEPTION(Maslov);
	}


} /* namespace quicksc */
